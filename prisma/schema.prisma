generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Employee {
  id        Int      @unique
  name      String
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model admissions {
  admission_id          Int       @id @default(autoincrement())
  student_id            Int?      @unique
  current_qualification String?   @db.VarChar(50)
  admission_type        String?   @db.VarChar(50)
  program               String?   @db.VarChar(50)
  major                 String?   @db.VarChar(50)
  campus                String?   @db.VarChar(50)
  shift                 String?   @db.VarChar(50)
  previous_university   String?   @db.VarChar(100)
  previous_program      String?   @db.VarChar(100)
  completed_semesters   Int?
  students              students? @relation(fields: [student_id], references: [student_id])
}

model basic_information {
  basic_info_id Int       @id @default(autoincrement())
  student_id    Int?      @unique
  father_name   String?   @db.VarChar(50)
  gender        String?   @db.VarChar(10)
  date_of_birth DateTime? @db.Date
  nationality   String?   @db.VarChar(50)
  religion      String?   @db.VarChar(50)
  cnic_number   String?   @db.VarChar(15)
  province      String?   @db.VarChar(50)
  disability    Boolean?  @default(false)
  students      students? @relation(fields: [student_id], references: [student_id])
}

model guardians {
  guardian_id    Int       @id @default(autoincrement())
  student_id     Int?      @unique
  guardian_name  String?   @db.VarChar(50)
  relationship   String?   @db.VarChar(20)
  contact_number String?   @db.VarChar(15)
  cnic_number    String?   @db.VarChar(15)
  education      String?   @db.VarChar(50)
  occupation     String?   @db.VarChar(50)
  organization   String?   @db.VarChar(100)
  designation    String?   @db.VarChar(50)
  email_address  String?   @db.VarChar(100)
  students       students? @relation(fields: [student_id], references: [student_id])
}

model intermediate_info {
  intermediate_id  Int       @id @default(autoincrement())
  student_id       Int?      @unique
  education_system String?   @db.VarChar(50)
  board_university String?   @db.VarChar(100)
  institute        String?   @db.VarChar(100)
  passing_year     Int?
  group_major      String?   @db.VarChar(50)
  result_status    String?   @db.VarChar(20)
  roll_number      String?   @db.VarChar(20)
  obtained_marks   Int?
  students         students? @relation(fields: [student_id], references: [student_id])
}

model matriculation_info {
  matric_id        Int       @id @default(autoincrement())
  student_id       Int?      @unique
  education_system String?   @db.VarChar(50)
  board_university String?   @db.VarChar(100)
  institute        String?   @db.VarChar(100)
  passing_year     Int?
  group_major      String?   @db.VarChar(50)
  result_status    String?   @db.VarChar(20)
  roll_number      String?   @db.VarChar(20)
  obtained_marks   Int?
  students         students? @relation(fields: [student_id], references: [student_id])
}

model required_documents {
  document_id                  Int       @id @default(autoincrement())
  student_id                   Int?       @unique
  nic_front                    String?
  nic_back                     String?
  matric_marksheet             String?
  intermediate_part2_marksheet String?
  guardian_cnic                String?
  matric_certificate           String?
  intermediate_part1_marksheet String?
  students                     students? @relation(fields: [student_id], references: [student_id])
}

model residence_information {
  residence_id          Int       @id @default(autoincrement())
  student_id            Int?      @unique
  present_address       String?
  present_city          String?   @db.VarChar(50)
  present_area          String?   @db.VarChar(50)
  present_postal_code   String?   @db.VarChar(10)
  permanent_address     String?
  permanent_city        String?   @db.VarChar(50)
  permanent_area        String?   @db.VarChar(50)
  permanent_postal_code String?   @db.VarChar(10)
  students              students? @relation(fields: [student_id], references: [student_id])
}

model students {
  student_id            Int                     @id @default(autoincrement())
  profile_photo         String?
  first_name            String                  @db.VarChar(50)
  last_name             String                  @db.VarChar(50)
  email                 String                  @unique @db.VarChar(100)
  phone_number          String?                 @db.VarChar(15)
  steps                 Steps                 
  admissions            admissions[]
  basic_information     basic_information[]
  guardians             guardians[]
  intermediate_info     intermediate_info[]
  matriculation_info    matriculation_info[]
  required_documents    required_documents[]
  residence_information residence_information[]
}

enum Role {
  Admin
  SoftwareEngineer
  Intern
}

  enum Steps{
    step_1
    step_2
    step_3
    step_4
    step_5
    step_6
    step_7
    step_8
    
  }